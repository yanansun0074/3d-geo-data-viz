---
title: "Data Cleaning Notebook"
format: html
---

```{r}
library(ggplot2)
library(tidyverse)
library(httr)
library(jsonlite)
library(RSocrata)
library(lubridate)
library(ggplot2)
library(vctrs)
library("data.table")
library(fuzzyjoin)
library(plotly)
library(viridis)
library(sf)
library(tidycensus)
library(stringr)
library(dplyr)
```


## 1. DOB Permit Issuance Data
```{r}
# Read in all permit data from DOB Issurance Permits
# It took so long, darn!
D_DOB_permits <- read.socrata("https://data.cityofnewyork.us/resource/ipu4-2q9a.csv")

# Get sidewalk shed permits only from DOB (permit_subtype == "SH")
D_DOB_sidewalk <- D_DOB_permits %>%
    mutate(
        parsed_date = parse_date_time(D_DOB_permits$issuance_date, orders = c("mdy", "ymd")),
        parsed_expire = parse_date_time(D_DOB_permits$expiration_date, orders = c("mdy", "ymd")),
        address = paste(house__, street_name)
    ) %>%
    filter(
        permit_subtype == "SH",
        permit_status == "ISSUED" | permit_status == "RE-ISSUED",
        is.na(issuance_date) == FALSE,
    )

# Get all sidewalk permits, its most recent expiration date, and active or not
D_DOB_sidewalk_2 <- D_DOB_sidewalk %>%
    data.frame() %>%
    group_by(job__) %>%
    summarise(
        address = address,
        created_date = min(parsed_date),
        expired_date = max(parsed_expire),
        created_year = year(created_date),
        expired_year = year(expired_date),
        expired_month = month(expired_date),
        renewal_count = n() - 1,
        active = is.na(expired_date) == TRUE | expired_date > "2024-02-01",
        borough = borough,
        bin = bin__,
        c_b_no = community_board,
        lat = gis_latitude,
        long = gis_longitude,
        census_tract = gis_census_tract,
    )
```

## 2. DOB NOW: Build -- Approved Permits
```{r}
# Read in all permit data from DOB NOW
D_NOW_permits <- read.socrata("https://data.cityofnewyork.us/resource/rbx6-tga4.csv")

# Change column names
names(D_NOW_permits)[names(D_NOW_permits) == "Issued Date"] <- "issued_date"
names(D_NOW_permits)[names(D_NOW_permits) == "Expired Date"] <- "expired_date"
names(D_NOW_permits)[names(D_NOW_permits) == "job_filing_number"] <- "job__"
names(D_NOW_permits)[names(D_NOW_permits) == "Estimated Job Costs"] <- "estimated_cost"
names(D_NOW_permits)[names(D_NOW_permits) == "Work Type"] <- "work_type"


# Get sidewalk shed only from DOB NOW database
D_NOW_sidewalk <- D_NOW_permits %>%
    mutate(
        parsed_created = parse_date_time(D_NOW_permits$issued_date, orders = c("ymd_HMS", "mdy_HMS")),
        parsed_expired = parse_date_time(D_NOW_permits$expired_date, orders = c("ymd_HMS", "mdy_HMS")),
        address = paste(house_no, street_name),
    ) %>%
    filter(
        work_type == "Sidewalk Shed",
        is.na(issued_date) == FALSE,
    )

# Get each sidewalk shed permits' most recent expiration date from DOB NOW database
D_NOW_sidewalk_2 <- D_NOW_sidewalk %>%
    data.frame() %>%
    group_by(job__) %>%
    summarise(
        address = address,
        created_date = min(parsed_created),
        expired_date = max(parsed_expired),
        created_year = year(created_date),
        expired_year = year(expired_date),
        expired_month = month(expired_date),
        renewal_count = n() - 1,
        active = is.na(expired_date) == TRUE | expired_date > "2024-02-01",
        bin = bin,
        borough = borough,
        c_b_no = c_b_no,
    )
```

Geocoding: get all geocoding address into a csv and geo-code it via https://dash.geocod.io
```{r}
D_NOW_geo <- D_NOW_sidewalk_2 %>%
    mutate(
        geocoding = paste(D_NOW_sidewalk_2$address, ", New York NY")
    ) %>%
    dplyr::select(geocoding)

head(D_NOW_geo)
write.csv(D_NOW_geo, "NOW_geocoding.csv", row.names = FALSE)
```

Geocoding results: 'NOW_geocoding_geocodio_c94f4ceb6507aedeff77d82f2b27d7b9a4af3506.csv'
```{r}
geo_code <- read.csv("NOW_geocoding_geocodio_c94f4ceb6507aedeff77d82f2b27d7b9a4af3506.csv")
# head(geo_code)
D_NOW_geo_all <- D_NOW_sidewalk_2 %>% mutate(geocoding = paste(D_NOW_sidewalk_2$address, ", New York NY"))

# Remove duplicated
geo_code_1 <- geo_code[!duplicated(geo_code$geocoding), ]
geo_code_2 <- geo_code_1 %>%
    select(c("geocoding", "Latitude", "Longitude")) %>%
    rename(
        lat = Latitude,
        long = Longitude
    )

D_NOW_sidewalk_3 <- D_NOW_geo_all %>%
    left_join(geo_code_2) %>%
    select(-geocoding)

```

See if there are same address with different job id.
There are same addresses with different job id.
```{r}
D_NOW_sidewalk_test <- D_NOW_sidewalk_2[!duplicated(D_NOW_sidewalk_2$address), ]
geo_code_1 <- geo_code[!duplicated(geo_code$geocoding), ]
```

Write combined sidewalk permits from DOB & DOB NOW to one csv file
```{r}
D_DOB_sidewalk_3 <- D_DOB_sidewalk_2 %>% select(-census_tract)

D_sidewalk_permits <- rbind(D_DOB_sidewalk_3, D_NOW_sidewalk_3)

write.csv(D_sidewalk_permits, "All_Shed_Permits.csv", row.names = FALSE)
```

Make sure there is no duplicated permit data from these datasets
```{python}
D_sidewalk_permits['job__'].value_counts().unique()         # array([1])
D_sidewalk_permits.info()
```

## 3. Storefront empty data

```{r}
store <- read.csv("Storefronts_Reported_Vacant_or_Not_20240324.csv")

# Filter by reporting year, vacancy, and business type
active_store <- store %>%
    filter(
        VACANT.ON.12.31 == "NO",
        PRIMARY.BUSINESS.ACTIVITY == "RETAIL",
        is.na(LONGITUDE) == FALSE,
        is.na(LATITUDE) == FALSE,
        Reporting.Year == "2022 and 2023"
    )

# Write data
write.csv(active_store, "Retail_Stores.csv", row.names = FALSE)
```